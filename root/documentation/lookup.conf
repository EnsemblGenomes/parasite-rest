<endpoints>
  <lookup>
    description=Find the species and database for a single identifier
    endpoint="lookup/id/:id"
    method=GET
    group=Lookup
    output=json
    output=xml
    <params>
      <species>
        type=String
        description=Species name/alias
        example=__VAR(species)__
      </species>
      <id>
        type=String
        description=A stable ID
        example=__VAR(gene_stable_id)__
        required=1
      </id>
      <db_type>
        type=String
        description=Restrict the search to a database other than the default. Useful if you need to use a DB other than core
        example=core
      </db_type>
      <format>
        type=Enum(full,condensed)
        description=Specify the formats to emit from this endpoint
        default=full
      </format>
      <expand>
        type=Boolean(0,1)
        description=Expands the search to include any connected features. e.g. If the object is a gene, its transcripts, translations and exons will be returned as well.
        default=0
      </expand>
    </params>
    <examples>
      <two>
        path=/lookup/id/
        capture=__VAR(gene_stable_id)__
        <params>
          db_type=core
          format=condensed
        </params>
        content=text/xml
      </two>
      <full>
        path=/lookup/id/
        capture=__VAR(gene_stable_id)__
        content=application/json
      </full>
      <expand>
        path=/lookup/id/
        capture=__VAR(gene_stable_id)__
        <params>
          expand=1
        </params>
        content=application/json
      </expand>
    </examples>
  </lookup>


  <lookup_post>
    description=Find the species and database for several identifiers. IDs that are not found are returned with no data.
    endpoint="lookup/id"
    method=POST
    group=Lookup
    output=json
    <params>
      <species>
        type=String
        description=Species name/alias. Causes problems if
        example=__VAR(species)__
      </species>
      <db_type>
        type=String
        description=Restrict the search to a database other than the default. Useful if you need to use a DB other than core
        example=core
      </db_type>
      <object_type>
        type=String
        description=Filter by feature type
        example=gene
        example=transcript
      </object_type>
      <format>
        type=Enum(full,condensed)
        description=Specify the formats to emit from this endpoint
        default=full
      </format>
      <expand>
        type=Boolean(0,1)
        description=Expands the search to include any connected features. e.g. If the object is a gene, its transcripts, translations and exons will be returned as well.
        default=0
      </expand>
    </params>

    postformat={ "ids": array }
    <examples>
      <basic>
        path=/lookup/id
        accept=application/json
        content=application/json
        body={ "ids" : ["__VAR(gene_stable_id)__", "__VAR(gene_stable_id_2)__" ] }
      </basic>
    </examples>
  </lookup_post>


  <symbol_lookup>
    description=Find the species and database for a symbol in a linked external database
    endpoint="lookup/symbol/:species/:symbol"
    method=GET
    group=Lookup
    output=json
    output=xml
    <params>
      <symbol>
        type=String
        description=A name or symbol from an annotation source has been linked to a genetic feature
        example=__VAR(gene_symbol)__
        required=1
      </symbol>
      <species>
        type=String
        description=Species name/alias
        example=__VAR(species)__
        required=1
      </species>
      <format>
        type=Enum(full,condensed)
        description=Specify the layout of the response
        default=full
      </format>
      <expand>
        type=Boolean(0,1)
        description=Expands the search to include any connected features. e.g. If the object is a gene, its transcripts, translations and exons will be returned as well.
        default=NULL
      </expand>
    </params>
    <examples>
      <two>
        path=/lookup/symbol/
        capture=__VAR(species)__
        capture=__VAR(gene_symbol)__
        <params>
          db_type=core
          format=condensed
        </params>
        content=text/xml
      </two>
      <full>
        path=/lookup/symbol/
        capture=__VAR(species)__
        capture=__VAR(gene_symbol)__
        content=application/json
      </full>
      <expand>
        path=/lookup/symbol/
        capture=__VAR(species)__
        capture=__VAR(gene_symbol)__
        <params>
          expand=1
        </params>
        content=text/xml
      </expand>
    </examples>
  </symbol_lookup>

  <symbol_post>
    description=Find the species and database for a set of symbols in a linked external database. Unknown symbols are omitted from the response.
    endpoint="lookup/symbol/:species/:symbol"
    method=POST
    group=Lookup
    output=json
    output=xml
    <params>
      <species>
        type=String
        description=Species name/alias for the whole batch of symbols
        example=__VAR(species)__
        required=1
      </species>
      <format>
        type=Enum(full,condensed)
        description=Specify the layout of the response
        default=full
      </format>
      <expand>
        type=Boolean(0,1)
        description=Expands the search to include any connected features. e.g. If the object is a gene, its transcripts, translations and exons will be returned as well.
        default=NULL
      </expand>
    </params>
    postformat={ "symbols": array }
    <examples>
      <basic>
        path=/lookup/symbol/__VAR(species)__
        accept=application/json
        content=application/json
        body={ "symbols" : ["__VAR(gene_symbol)__", "__VAR(gene_symbol2)__" ] }
      </basic>
    </examples>
  </symbol_post>
 <lookup_genome>
    description=Query for a named genome and retrieve the gene models
    endpoint="lookup/genome/:name"
    method=GET
    group=Lookup
    output=json
    output=xml
    <params>
      <name>
        type=String
        description=The production name of the genome.
        example=__VAR(genome_name)__
        required=1
      </name>
      <level>
        type=Enum(gene,transcript,translation,protein_feature)
        description=Level of objects to retrieve
        required=0
        default=gene
      </level>
      <xrefs>
        type=Boolean(0,1)
        description=Include cross-references
        default=NULL
        required=0
      </xrefs>
      <biotypes>
        type=String
        description=Biotype of genes to retrieve. Default is all.
        default=NULL
        example=__VAR(biotype)__
        required=0
      </biotypes>
    </params>
    <examples>
      <one>
        path=/lookup/genome/
        capture=__VAR(genome_name)__
        <params>
           biotypes=__VAR(biotype)__
        </params>
        content=application/json
      </one>
    </examples>
  </lookup_genome>
</endpoints>
